// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Transaction {
    #[prost(bytes = "vec", tag = "1")]
    pub hash: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub from: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "3")]
    pub to: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag = "4")]
    pub amount: u64,
    #[prost(uint64, tag = "5")]
    pub fee: u64,
    #[prost(uint64, tag = "6")]
    pub gas_limit: u64,
    #[prost(uint64, tag = "7")]
    pub gas_price: u64,
    #[prost(uint64, tag = "8")]
    pub nonce: u64,
    #[prost(bytes = "vec", tag = "9")]
    pub data: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "10")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag = "11")]
    pub timestamp: u64,
    #[prost(enumeration = "TransactionType", tag = "12")]
    pub tx_type: i32,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TransactionType {
    Transfer = 0,
    ContractDeployment = 1,
    ContractCall = 2,
    ValidatorStaking = 3,
    ValidatorUnstaking = 4,
    System = 5,
}
impl TransactionType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            TransactionType::Transfer => "TRANSFER",
            TransactionType::ContractDeployment => "CONTRACT_DEPLOYMENT",
            TransactionType::ContractCall => "CONTRACT_CALL",
            TransactionType::ValidatorStaking => "VALIDATOR_STAKING",
            TransactionType::ValidatorUnstaking => "VALIDATOR_UNSTAKING",
            TransactionType::System => "SYSTEM",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TRANSFER" => Some(Self::Transfer),
            "CONTRACT_DEPLOYMENT" => Some(Self::ContractDeployment),
            "CONTRACT_CALL" => Some(Self::ContractCall),
            "VALIDATOR_STAKING" => Some(Self::ValidatorStaking),
            "VALIDATOR_UNSTAKING" => Some(Self::ValidatorUnstaking),
            "SYSTEM" => Some(Self::System),
            _ => None,
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BlockHeader {
    #[prost(bytes = "vec", tag = "1")]
    pub hash: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub previous_hash: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "3")]
    pub merkle_root: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "4")]
    pub state_root: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag = "5")]
    pub height: u64,
    #[prost(uint64, tag = "6")]
    pub timestamp: u64,
    #[prost(bytes = "vec", tag = "7")]
    pub validator: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "8")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "9")]
    pub zk_proof: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag = "10")]
    pub nonce: u64,
    #[prost(uint64, tag = "11")]
    pub gas_limit: u64,
    #[prost(uint64, tag = "12")]
    pub gas_used: u64,
    #[prost(uint64, tag = "13")]
    pub difficulty: u64,
    #[prost(bytes = "vec", tag = "14")]
    pub extra_data: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Block {
    #[prost(message, optional, tag = "1")]
    pub header: ::core::option::Option<BlockHeader>,
    #[prost(message, repeated, tag = "2")]
    pub transactions: ::prost::alloc::vec::Vec<Transaction>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FinalityGossip {
    /// Serialized BlockHeader
    #[prost(bytes = "vec", tag = "1")]
    pub block_header: ::prost::alloc::vec::Vec<u8>,
    /// Serialized ZK proof
    #[prost(bytes = "vec", tag = "2")]
    pub zk_proof: ::prost::alloc::vec::Vec<u8>,
}
